{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TeamsContext","createContext","TeamsContextProvider","props","useState","teams","setTeams","GET_URL","useEffect","console","log","fetch","then","res","json","data","catch","error","Provider","value","children","TeamContext","TeamContextProvider","team","setTeam","Nav","className","TeamsList","useContext","Autocomplete","id","options","getOptionLabel","option","strTeam","onChange","event","teamObj","style","width","renderInput","params","TextField","label","variant","fullWidth","Team","JSON","stringify","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0RAQMA,EAAeC,0BACfC,EAAuB,SAAAC,GAAU,IAAD,EACRC,mBAAS,IADD,mBAC5BC,EAD4B,KACrBC,EADqB,KAG9BC,EAAU,uEAgBhB,OAdAC,qBAAU,WACRC,QAAQC,IAAI,yBAEZC,MAAMJ,GACLK,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJN,QAAQC,IAAI,kBAAmBK,GAC/BT,EAASS,EAAKV,UAEfW,OAAM,SAAAC,GACLR,QAAQC,IAAI,iBAAkBO,QAE/B,CAACV,IAGF,kBAACP,EAAakB,SAAd,CAAuBC,MAAO,CAAEd,QAAOC,aACpCH,EAAMiB,WAQPC,EAAcpB,0BACdqB,EAAsB,SAAAnB,GAAS,MAETC,mBAAS,IAFA,mBAE3BmB,EAF2B,KAErBC,EAFqB,KAqBnC,OACE,kBAACH,EAAYH,SAAb,CAAsBC,MAAO,CAAEI,OAAMC,YAClCrB,EAAMiB,WASPK,EAAM,WACV,OACE,oCACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,SAOFC,EAAY,WAAO,IACftB,EAAUuB,qBAAW5B,GAArBK,MACAmB,EAAYI,qBAAWP,GAAvBG,QACR,OACE,oCACKnB,GACC,kBAACwB,EAAA,EAAD,CACEC,GAAG,uBACHC,QAAS1B,EACT2B,eAAgB,SAAAC,GAAM,OAAIA,EAAOC,SACjCC,SAAU,SAACC,EAAOC,GAChB5B,QAAQC,IAAI,cAAe2B,GAC3Bb,EAAQa,IAEVC,MAAO,CAAEC,MAAO,KAChBC,YAAa,SAAAC,GAAM,OACjB,kBAACC,EAAA,EAAD,iBAAeD,EAAf,CAAuBE,MAAM,cAAcC,QAAQ,WAAWC,WAAS,UAS/EC,EAAO,WAAO,IACVvB,EAASK,qBAAWP,GAApBE,KACR,OACE,oCACE,yBAAKG,UAAU,QACZH,GACC,6BAAMwB,KAAKC,UAAUzB,EAAM,KAAM,OAsB5B0B,MAff,WACE,OACE,yBAAKvB,UAAU,OACX,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,0BAAMA,UAAU,QACd,kBAAC,EAAD,WCnHMwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjD,MAAK,SAAAkD,GACjCA,EAAaC,kB","file":"static/js/main.0ad3379d.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport './App.css';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\n\n// teams\n// api: https://www.thesportsdb.com/api/v1/json/1/search_all_teams.php?l=NBA\nconst TeamsContext = createContext();\nconst TeamsContextProvider = props => {\n  const [ teams, setTeams ] = useState('');\n  // teams api url\n  const GET_URL = 'https://www.thesportsdb.com/api/v1/json/1/search_all_teams.php?l=NBA'\n\n  useEffect(() => {\n    console.log('fetching all teams...');\n    // fetch\n    fetch(GET_URL)\n    .then(res => res.json())\n    .then(data => {\n      console.log('>> fetched data', data);\n      setTeams(data.teams);\n    })\n    .catch(error => {\n      console.log('>> fetch error', error);\n    })\n  }, [GET_URL])\n\n  return (\n    <TeamsContext.Provider value={{ teams, setTeams }}>\n      {props.children}\n    </TeamsContext.Provider>\n  )\n}\n\n\n// team\n// api (lookup): https://www.thesportsdb.com/api/v1/json/1/lookupteam.php?id=133604\nconst TeamContext = createContext();\nconst TeamContextProvider = props => {\n  //const [ teamId, setTeamId ] = useState('');\n  const [ team, setTeam ] = useState('');\n\n  // const GET_URL = `https://www.thesportsdb.com/api/v1/json/1/lookupteam.php?id=${teamId}`\n\n  // useEffect(() => {\n  //   if(teamId !== \"\") {\n  //     console.log('fetching team data...');\n  //     fetch(GET_URL)\n  //       .then(res => res.json())\n  //       .then(data => {\n  //         console.log('>> fetched data', data.teams);\n  //         setTeam(data);\n  //       })\n  //       .catch(error => {\n  //         console.log('>> fetch error', error);\n  //       })\n  //     }\n  // }, [GET_URL, teamId])\n\n  return (\n    <TeamContext.Provider value={{ team, setTeam }}>\n      {props.children}\n    </TeamContext.Provider>\n  )\n}\n\n\n// COMPONENTS\n\n// nav\nconst Nav = () => {\n  return (\n    <>\n      <nav className=\"nav\">\n        <TeamsList />\n      </nav>\n    </>\n  )\n}\n\n// teams list\nconst TeamsList = () => {\n  const { teams } = useContext(TeamsContext);\n  const { setTeam } = useContext(TeamContext);\n  return (\n    <>\n        {teams &&\n          <Autocomplete\n            id=\"sports-teams-options\"\n            options={teams}\n            getOptionLabel={option => option.strTeam}\n            onChange={(event, teamObj) => {\n              console.log('>> teamObj:', teamObj);\n              setTeam(teamObj);\n            }}\n            style={{ width: 300 }}\n            renderInput={params => (\n              <TextField {...params} label=\"Search Team\" variant=\"outlined\" fullWidth />\n            )}\n          />\n        }\n    </>\n  )\n}\n\n// team page\nconst Team = () => {\n  const { team } = useContext(TeamContext);\n  return (\n    <>\n      <div className=\"team\">\n        {team && \n          <pre>{JSON.stringify(team, null, 2)}</pre>\n        }\n      </div>\n    </>\n  )\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <TeamsContextProvider>\n          <TeamContextProvider>\n            <Nav />\n            <main className=\"main\">\n              <Team />\n            </main>\n          </TeamContextProvider>\n        </TeamsContextProvider>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}