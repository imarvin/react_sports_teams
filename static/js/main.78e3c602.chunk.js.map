{"version":3,"sources":["context/TeamsContext.js","context/TeamContext.js","components/TeamsList.js","components/SocialNav.js","components/Nav.js","components/Team.js","App.js","serviceWorker.js","index.js"],"names":["TeamsContext","createContext","TeamsContextProvider","props","useState","teams","setTeams","GET_URL","useEffect","fetch","then","res","json","data","catch","error","console","log","Provider","value","children","TeamContext","TeamContextProvider","teamStr","setTeamStr","team","setTeam","useContext","length","toLowerCase","replace","TeamsList","className","Autocomplete","id","options","getOptionLabel","option","strTeam","onChange","event","teamObj","blurOnSelect","style","width","renderInput","params","TextField","label","variant","fullWidth","SocialNav","href","strFacebook","strInstagram","strTwitter","strYoutube","Nav","Team","backgroundImage","strTeamFanart1","src","strTeamBadge","alt","strWebsite","intFormedYear","strSport","strStadium","strDescriptionEN","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.78e3c602.chunk.js","sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\n\nexport const TeamsContext = createContext();\n\nconst TeamsContextProvider = (props) => {\n    const [teams, setTeams] = useState([]);\n\n    // teams api url\n    const GET_URL = 'https://www.thesportsdb.com/api/v1/json/1/search_all_teams.php?l=NBA'\n\n    useEffect(() => {\n        // fetch\n        fetch(GET_URL)\n            .then(res => res.json())\n            .then(data => {\n                //console.log('>> fetched data', data);\n                setTeams(data.teams);\n            })\n            .catch(error => {\n                console.log('>> fetch error', error);\n            })\n    }, [GET_URL])\n\n    return (\n        <TeamsContext.Provider value={{ teams, setTeams }}>\n            {props.children}\n        </TeamsContext.Provider>\n    )\n}\n\nexport default TeamsContextProvider;","import React, { createContext, useContext, useState, useEffect } from 'react'\nimport { TeamsContext } from './TeamsContext';\n\nexport const TeamContext = createContext();\n\nconst TeamContextProvider = (props) => {\n    const [teamStr, setTeamStr] = useState('');\n    const [team, setTeam] = useState('');\n    const { teams } = useContext(TeamsContext);\n\n    // to be used on the search api\n    const defaultTeam = \"New York Knicks\";\n    // search api\n    const GET_URL = `https://www.thesportsdb.com/api/v1/json/1/searchteams.php?t=${teamStr}`;\n\n    // team look up api with a specific team id\n    //const GET_URL = `https://www.thesportsdb.com/api/v1/json/1/lookupteam.php?id=${teamId}`\n\n    useEffect(() => {\n        if (teamStr !== \"\") {\n            fetch(GET_URL)\n            .then(res => res.json())\n            .then(data => {\n                //console.log('>> fetched data', data.teams);\n                setTeam(data.teams[0]);\n            })\n            .catch(error => {\n                console.log('>> fetch error', error);\n            })\n        }\n    }, [GET_URL, teamStr])\n\n    useEffect(() => {\n        if (teams.length > 0) {\n            setTeamStr(defaultTeam.toLowerCase().replace(/ /g, \"_\"));\n        }\n    }, [teams])\n\n    return (\n        <TeamContext.Provider value={{ team, setTeam, setTeamStr }}>\n            {props.children}\n        </TeamContext.Provider>\n    )\n}\n\nexport default TeamContextProvider;","import React, { useContext } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { TeamsContext } from '../context/TeamsContext';\nimport { TeamContext } from '../context/TeamContext';\n\nconst TeamsList = () => {\n    const { teams } = useContext(TeamsContext);\n    const { team, setTeamStr } = useContext(TeamContext);\n\n    return (\n        <div className=\"nav__search-input\">\n            {teams &&\n                <Autocomplete\n                    id=\"sports-teams-options\"\n                    value={team}\n                    options={teams}\n                    getOptionLabel={option => option.strTeam ? option.strTeam : ''}\n                    onChange={(event, teamObj) => {\n                        //console.log('>> teamObj:', teamObj);\n                        //setTeam(teamObj);\n                        setTeamStr(teamObj.strTeam.toLowerCase().replace(/ /g, \"_\"))\n                    }}\n                    blurOnSelect={true}\n                    style={{ width: 300 }}\n                    renderInput={params => (\n                        <TextField {...params} label=\"Search Team\" variant=\"outlined\" fullWidth />\n                    )}\n                />\n            }\n        </div>\n    )\n}\n\nexport default TeamsList;\n","import React, { useContext } from 'react';\nimport FacebookIcon from '@material-ui/icons/Facebook';\nimport InstagramIcon from '@material-ui/icons/Instagram';\nimport TwitterIcon from '@material-ui/icons/Twitter';\nimport YouTubeIcon from '@material-ui/icons/YouTube';\nimport { TeamContext } from '../context/TeamContext';\n\nconst SocialNav = () => {\n    const { team } = useContext(TeamContext);\n    return (\n        <div className=\"nav__social\">\n            <ul className=\"nav__social-ul\">\n                <li className=\"nav__social-facebook\">\n                    <a href={`//${team.strFacebook}`} ><FacebookIcon /></a>\n                </li>\n                <li className=\"nav__social-instagram\">\n                    <a href={`//${team.strInstagram}`} ><InstagramIcon /></a>\n                </li>\n                <li className=\"nav__social-twitter\">\n                    <a href={`//${team.strTwitter}`} ><TwitterIcon /></a>\n                </li>\n                <li className=\"nav__social-youtube\">\n                    <a href={`//${team.strYoutube}`} ><YouTubeIcon /></a>\n                </li>\n            </ul>\n        </div>\n    )\n}\n\nexport default SocialNav;\n","import React from 'react';\nimport TeamsList from './TeamsList';\nimport SocialNav from './SocialNav';\n\nconst Nav = () => {\n    return (\n      <>\n        <nav className=\"nav\">\n          <TeamsList />\n          <SocialNav />\n        </nav>\n      </>\n    )\n  }\n\nexport default Nav;\n","import React, { useContext } from 'react';\nimport { TeamContext } from '../context/TeamContext';\n\nconst Team = () => {\n    const { team } = useContext(TeamContext);\n    return (\n        <>\n            <div className=\"team\">\n                {team &&\n                    <>\n                        <div className=\"team__wrapper\" style={{ backgroundImage: `url(${team.strTeamFanart1})` }}>\n                            <div className=\"team__details\">\n                                <img src={team.strTeamBadge} className=\"team__badge\" alt={team.strTeam} />\n                                <ul>\n                                    <li>Team Name: <a href={`//${team.strWebsite}`}>{team.strTeam}</a></li>\n                                    <li>Year Formed: {team.intFormedYear}</li>\n                                    <li>Sport: {team.strSport}</li>\n                                    <li>Stadium: {team.strStadium}</li>\n                                </ul>\n                            </div>\n                            <div className=\"team__description\"><p>{team.strDescriptionEN}</p></div>\n                        </div>\n                        {/* <pre>{JSON.stringify(team, null, 2)}</pre> */}\n                    </>\n                }\n            </div>\n        </>\n    )\n}\n\n\nexport default Team;\n","import React from \"react\";\nimport './App.scss';\nimport TeamsContextProvider from \"./context/TeamsContext\";\nimport TeamContextProvider from \"./context/TeamContext\";\nimport Nav from \"./components/Nav\";\nimport Team from \"./components/Team\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <TeamsContextProvider>\n          <TeamContextProvider>\n            <Nav />\n            <main className=\"main\">\n              <Team />\n            </main>\n          </TeamContextProvider>\n        </TeamsContextProvider>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}